{
  "comments": [
    {
      "key": {
        "uuid": "f1fc4ac4_a98f42d7",
        "filename": "healthMonitor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 271,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "Why are you forcing a conversion to string_view here?  Isn\u0027t \u0027auto\u0026\u0027 sufficient?",
      "range": {
        "startLine": 271,
        "startChar": 9,
        "endLine": 271,
        "endChar": 31
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82810edc_a579f0b9",
        "filename": "healthMonitor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 271,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Switched to auto\u0026.",
      "parentUuid": "f1fc4ac4_a98f42d7",
      "range": {
        "startLine": 271,
        "startChar": 9,
        "endLine": 271,
        "endChar": 31
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18180edc_3ccfd288",
        "filename": "healthMonitor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 273,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "I\u0027m not sure if this is really doing an emplace since none of the elements here are std::move\u0027d, so you should probably use \u0027push_back\u0027 to avoid confusion that you\u0027re actually doing something that performs better than push_back does.",
      "range": {
        "startLine": 273,
        "startChar": 26,
        "endLine": 273,
        "endChar": 38
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d559fb8c_b00b2de5",
        "filename": "healthMonitor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 273,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Switched to push_back.",
      "parentUuid": "18180edc_3ccfd288",
      "range": {
        "startLine": 273,
        "startChar": 26,
        "endLine": 273,
        "endChar": 38
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64085ee8_e8e0e15c",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "Can you forward declare this at the top (and ensure initialization with {})?  It was hard to see with no whitespace to separate it.  The definition seems separate from the rest of the sequence from 124-137.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 40
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c0c65c4_509588fb",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Moved to the top.",
      "parentUuid": "64085ee8_e8e0e15c",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 40
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce99ab5_64b3c07e",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "Please use C++ \u003d\u003d operator on a string for clarity.",
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18ded413_27b804fe",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "dce99ab5_64b3c07e",
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32b85839_55b0b497",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 143,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "Any reason to not use container foreach?",
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad331126_a1365311",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 143,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "I wanted to print the index of the IDs.\nSwitched to container foreach.",
      "parentUuid": "32b85839_55b0b497",
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b621f43f_55b9fdc4",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "This cast doesn\u0027t seem necessary since the operator+ will return a string anyhow, right?",
      "range": {
        "startLine": 146,
        "startChar": 20,
        "endLine": 146,
        "endChar": 31
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51b1b192_07b94c17",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Removed the cast.",
      "parentUuid": "b621f43f_55b9fdc4",
      "range": {
        "startLine": 146,
        "startChar": 20,
        "endLine": 146,
        "endChar": 31
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cdc0c7d_5fc98ad9",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 147,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T18:00:39Z",
      "side": 1,
      "message": "Needed?  If it is, it seems like an obvious thing for us to get fixed in phosphor-logging.",
      "range": {
        "startLine": 147,
        "startChar": 24,
        "endLine": 147,
        "endChar": 30
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6204f800_96d276dd",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 147,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-16T18:51:11Z",
      "side": 1,
      "message": "Yes this is correct, the first argument passed to phosphor::logging::log must be a C-string (https://github.com/openbmc/phosphor-logging/blob/master/phosphor-logging/log.hpp#L159).\n\nThe entry() function doesn\u0027t seem to produce any contents in the system log for some reason, so `log(\"...\", entry(\"...\"))` does not work, that\u0027s why I ended up with concatenating a std::string.\n\nI guess this is not the best way to format a log and would like to know what I can help in testing phosphor-logging changes.",
      "parentUuid": "5cdc0c7d_5fc98ad9",
      "range": {
        "startLine": 147,
        "startChar": 24,
        "endLine": 147,
        "endChar": 30
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b9132e8_02f2486a",
        "filename": "healthMonitor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 147,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2021-06-17T09:31:35Z",
      "side": 1,
      "message": "Some findings regarding phosphor-logging:\n\n1) The log function expects a const char* or char* as the first parameter, I guess to make it accept std::string as the first parameter one could specialize the template in log.hpp:\n\n    template\u003clevel L, typename... Entry\u003e\n    void log(const std::string\u0026 msg, Entry... e) {\n      log\u003cL\u003e(msg.c_str(), std::forward\u003cEntry\u003e(e)...);\n    }\n\n2) Some ways of sending a log message appear to be supported by using sd_journal_send but are not easy with phosphor::logging::log, one example is as follows:\n\n    sd_journal_send(\"MESSAGE\u003d%d+%d\u003d%d(%s)\", 1, 2, 3, \"hello\");\n\n    (should send \"1+2\u003d3(hello)\" to the system journal)\n\nThis appears to be hard to achieve using phosphor::logging because a) phosphor::logging expects all parameters in an entry to be const char* or char*, so the user has to call std::to_string on the numbers; b) it expects Msg to be a C-string, and puts the transaction tuple immediately after msg_tuple, so the user won\u0027t have an opportunity to add parameters to msg_tuple.\n\nIt appears it\u0027s possible to \"abuse\" the phosphor::logging::log function to achieve the effect in the example by a) overwriting the MESSAGE variable with a new entry, and b) use std::tuple instead of entry to circumvent the requirement that all entry elements must be C-strings (added in patchset 13.)",
      "parentUuid": "6204f800_96d276dd",
      "range": {
        "startLine": 147,
        "startChar": 24,
        "endLine": 147,
        "endChar": 30
      },
      "revId": "9f26a69fd0a39936e1b7b5b519bab263aebb9aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}